## Updated Task: Migrate Custom UI to Material Design 3 Equivalents

### Context (from UI Audit and PR #94)
- The browser extension currently uses a custom CSS design system, NOT Material Design or any external UI framework.
- Custom tokens and color variables are inspired by Material, but implementation is fully custom.
- The extension is a single-page app with a draggable/resizable overlay panel, featuring 8 functional sections and 20+ unique UI components (see UI_AUDIT.md and UI_COMPONENT_DIAGRAM.md for details).
- All components are accessibility-compliant, responsive, and tested; design is modular and performance-optimized.

### New Instructions
1. Component Mapping: For each custom UI component documented in UI_AUDIT.md, identify the closest Material 3 (Material You) equivalent (see Material 3 Documentation: https://m3.material.io/).
2. Implementation: Refactor or replace each custom component with the corresponding Material 3 Web Component, or re-style to match Material 3 guidelines if a direct replacement does not exist.
   - Ensure new components preserve accessibility, responsiveness, and performance characteristics.
   - Maintain separation of concerns and modular structure.
3. Design Consistency: Update theming and tokens to use Material 3's dynamic color and typography system throughout the extension.
4. Documentation: Update UI_AUDIT.md and other relevant docs to reflect the new component mapping and migration status.

### References
- UI_AUDIT.md
- UI_COMPONENT_DIAGRAM.md
- Material 3 Documentation: https://m3.material.io/
- Material Web Components: https://github.com/material-components/material-web

---

Note: Refer to the audit results in PR #94 and issue #88 for the full inventory and architecture. Aim for a seamless migration that leverages Material 3's strengths while retaining the extension's accessibility, performance, and UX quality.